/*
 * SpinVerifier.h
 *
 *  Created on: Dec 8, 2016
 *      Author: lyl
 */

#ifndef SPINVERIFIER_H_
#define SPINVERIFIER_H_

#include "Verifier.h"

namespace std {

class SpinVerifier : public Verifier {
public:

	SpinVerifier(Artifact& a, vector<Automaton>& _atms) : Verifier(a, _atms, false, false), max_type_count(0) { }

	// generate the promela code to verifier the target property
	string generate_promela(int taskid, Formula* target);

	string promela_translate_eq(int expr1, int expr2);

	string promela_translate_condition(int task_id, Formula* form);

	string promela_get_assignment(int task_id, vector<int>& prop_vars);

    void get_prop_exprs(int task_id, vector<int>& prop_vars, vector<int>& res);

	string promela_is_current(int task_id);

	string promela_is_active(int task_id);

	string promela_is_ready(int task_id);
	
    string promela_resolve();

	string promela_all_child_inactive(int task_id);

	virtual ~SpinVerifier();

    map<int, int> type_count;
    int max_type_count;
};

} /* namespace std */

#endif /* SPINVERIFIER_H_ */
